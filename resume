Using localStorage: 
	* Data is stored in Key-Value pairs.
	* Key must be unique(and a string) + Value must be a string.
	* Storing Numbers/strings is straight forward: 
		-> localStorage( key, value )
	* Storing Arrays / JS obj / Dates should pass by an additional step:
		-> To save them: localStorage( key , JSON.string(value) )
		-> To retrieve them: JSON.parse( localStorage.getItem(key) )
********************************************************************************************************************************************************************************************************
Check if an elt matches a CSS selector: 
	elt.matches("<css selector>")
********************************************************************************************************************************************************************************************************
if you have a class that you want to add it to an elt if it's not there OR remove it if it's there use this: 
	elt.classList.toggle("<className>")
****************************************************************************************************************************************************************************************************
Modules: 
	* A module is a JS file that exports some (or all ) of its code(variables , methods ..). Other files can import this file as a dependency.
	* ADV: allows developers to: 
		- Organize code within their own projects
		- Share the code with the world through package managers like 'NPM'.
	* We have 2 types of modules:
		a) ES6 ( Web ) modules
		b) Node modules.

Bundlers:
	* They're tools that bundle (pack up together) all of the JS, CSS and other assets that are used in a web application.
	* It makes it easier to deploy and distribute the application.
	* NOTE: 
		- NPM: + is a package manager.
				   + it's used to install, update and manage JS packages(libraries of code that can be used to add new features to the JS application).
				   + It has a large library of packages available.
		- Parcel: + is a web bundler.
					  + it combines the JS,CSS .. into a single file ready for deployment.
					  + If you have one main file out of which come many dependencies (and those dependencies require other dependencies) => You only have to give the bundler the first main file then it'll figure out by itself which dependencies it needs to build the application.
					  + It's considered a development dependency(you only need it when developing the website ie after the final version of the website is available you won't need to install Parcel to run your website). It's different from a normal dependency which is necessary for the website to function.
					  + To install Parcel as a development dependency: `npm i parcel-bundler --save-dev`
					  + To use Parcel: 
					  		- Go to the file "package.json"
					  		- "scripts" {
					  			"start": "parcel index.html" // It will run Parcel starting from index.html ie It will figure out -starting from the index file- all the dependencies that index & the other files need to run the app
					  			"build": "parcel build index.html"
					  		  }
					  + In the terminal type: `npm start` -> This will run whatever script called 'start' in the 'scripts' object in package.json
					  														-> It'll create 2 folders(NB: whenever a weird error appears delete both of them): 
					  																+ .cache : It's Parcel's internal cache. It contains everything that it stores for its builds
					  																+ dist : Inside of it you may have -> index.html
					  																													 -> a JS file (it copies all the code you need from the dependencies into one file)
					  																													 -> a 'xxx.js.map' file
					  																													 
 					  + In the terminal type: `npm run build` -> This will run whatever script called 'build' in the 'scripts' object in package.json
 					  																-> It'll a build a site by taking all the files and converting them all in way that works with all the browsers even if they don't support modules
 					  																-> It creates the same 2 folders that `npm start` built BUT it minifies the code in those files ie removes all the spacing, replaces the names of the variables into a one letter variable .. => This reduces the amount of info sent from the server to the browser and thus a quicker download of the files.
 					  																-> The goal of the file 'xxx.js.map'(ie a source map file) is to translate the minified version of the code(easier to download) into the human readable version that the developers wrote.
					  
					  + Adv: if you use npm to download a package and you want to use it: 
						  	a) If you use the syntax of Node modules: 
						  		-> You only need: `const uuid = require("uuid")` Then you can use it without a problem: `clg(uuid.v4())`
						  		-> Node will figure out by itself the main file of the package and do everything under the hood for you.
						  	b) If you use the syntax of ES6 modules (ie use the packages inside the browser):
						  		-> You have to find BY YOURSELF the main files of the package that you want to use by searching the directories: 
						  			` import { v4 } from "./node_modules/uuid/dist/esm-browser/index.js" `
								->	 Thanks to Parcel, it detects the path by itself you only have to write: ` import { v4 } from "uuid" `
	  
************************************************************************************************************************************************************************************************************
Goal of the date picker project: 
	* Show that I know how to use localStorage, libraries using npm & parcel as well as general JS knowledge.
Common Helpers: 
	+ add (adds years/months/weeks/days/.. to a given date)
	+ sub (substract years/months/weeks/days/.. from a given date)
	+ subMonths.
	+ eachDayOfInterval ( returns an array of days within the specified interval )
	+ eachMonthOfInterval (returns an array of months within the specified interval)

	
01:32:00 + 01:19:46 + 02:27:00 + 01:40:00 (missing the local storage stuff)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
